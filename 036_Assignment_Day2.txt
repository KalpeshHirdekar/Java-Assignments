Name_Kalpesh Hirdekar
Roll_no_230944520036

/*1)create a class "Shape" with 2 attributes, "width" and "height". Make sure one can not access these attributes directly.
provide accessor methods on these attributes and allow them to call from outside of your class.*/

package Assignment_Day2;

import java.util.*;
class Shape {
	
	private	int width;
	private	int height;
		
		public int getWidth() {
			return width;
		}
		public void setWidth(int width) {
			this.width = width;
		}
		public int getHeight() {
			return height;
		}
		public void setHeight(int height) {
			this.height = height;
		}
}

public class Demo_Q1 {

	public static void main(String[] args) {
		Scanner sc = new Scanner (System.in);
		Shape s1 = new Shape();
		System.out.println("Enter the Width:");
		int w = sc.nextInt();
		s1.setWidth(w);
		System.out.println("Enter the Height:");
		int h = sc.nextInt();
		s1.setHeight(h);
		System.out.println("Width is"+"\t"+s1.getWidth());
		System.out.println("Height is"+"\t"+s1.getHeight());
		sc.close();
		
	}

}

/*2) Define a class "MyClass" and make sure clients can instantiate it , 
a) without any argument
b) with one int argument
c) with two int arguments*/

package Assignment_Day2;

public class Constructor_Q2 {
	
	private int num1;
	private int num2;
	
	public Constructor_Q2() {
		System.out.println("Default Constructor");
		System.out.println(num1 + "\t" +num2);
	}
	
	public Constructor_Q2(int num1) {
		this.num1 = num1;
		System.out.println("One Parameter Constructor");
		System.out.println(num1 + "\t" +num2);
	}
	
	public Constructor_Q2(int num1, int num2) {
		this.num1 = num1;
		this.num2 = num2;
		System.out.println("Two Parameters Constructor");
		System.out.println(num1 + "\t" +num2);
	}

	public static void main(String[] args) {
		Constructor_Q2 c1 = new Constructor_Q2();
		Constructor_Q2 c2 = new Constructor_Q2(40);
		Constructor_Q2 c3 = new Constructor_Q2(50,60);
		
	}

}

/*3) Define a class "Emp" with private static member "int cnt".
How will u make sure that outsiders can read the value of cnt ?*/

package Assignment_Day2;

class Emp {
	
	private static int cnt = 20;

	public static int getCnt() {
		return cnt;
	}

public class Demo_Q3 {
	public static void main(String[] args) {
		System.out.println(getCnt());
	}

}

/*4) Define a class "DemoOb". 
create an instance of it.
now create a reference and assign the reference created in the above statement.
	Discuss what happens?
Now since u have 2 references, take one of the reference and assign a new instance of the class.
	Discuss what happens?
(For ur discussion, write necessary comments in the program)*/

package Assignment_Day2;

public class DemoOb_Q4 {
	
	public static void main(String[] args) {

		DemoOb_Q4 ob1 = new DemoOb_Q4();
		System.out.println(ob1);
		DemoOb_Q4 ob2 = ob1; // here d2 is referring to the same object to which d1 is referring
		System.out.println(ob1);
		System.out.println(ob2);
		ob1 = new DemoOb_Q4();
		System.out.println(ob1);
		System.out.println(ob2);
	}

}

/* Comment - first we have created the reference obj1 and assign this to one object on heap and then we have
 initialized another reference obj2 with referring to same object to which obj1 is referring and then we assign the new object on heap and 
 give reference to obj1 now it will refer to the new object and stop referring the old object*/

/*5) Define 3 classes A , B and C
in all these classes create static and nonstatic variables as well as methods.
	Now Define a class "Demo" ,in which define "main" function. From this main function try to access all the members of A ,B  and C.*/

package Assignment_Day2;

class A{
	
	private static int num1 = 10;
	private int num2 = 20;
	
	public static int getNum1() {
		System.out.println("In Static A Class");
		return num1;
	}
	
	public int getNum2() {
		System.out.println("In Non-Static A Class");
		return num2;
	}
}

class B{
	private static char ch1 = 'X';
	private char ch2 = 'Y';
	
	public static char getChar1() {
		System.out.println("In Static B Class");
		return ch1;
	}
	
	public char getChar2() {
		System.out.println("In Non-Static B Class");
		return ch2;
	}
}

class C{
	private static String s1 = "Hello";
	private String s2 = "Bye";
	
	public static String getStr1() {
		System.out.println("In Static C Class");
		return s1;
	}
	
	public String getStr2() {
		System.out.println("In Non-Static C Class");
		return s2;
	}
	
}

public class Demo_Q5 {

	public static void main(String[] args) {
		System.out.println("Calling Class A Methods:");
		System.out.println(A.getNum1());
		A ob1 = new A();
		System.out.println(ob1.getNum2());
		
		System.out.println("Calling Class B Methods:");
		System.out.println(B.getChar1());
		B ob2 = new B();
		System.out.println(ob2.getChar2());
		
		System.out.println("Calling Class C Methods:");
		System.out.println(C.getStr1());
		C ob3 = new C();
		System.out.println(ob3.getStr2());
	}

}

//6) define static initializers in the above A,B and C classes and check the order of their execution.

package Assignment_Day2;

class X {
	static {
		System.out.println("In A Class Static Initilizer");
	}
}

class Y {
	static {
		System.out.println("In B Class Static Initilizer");
	}
}

class Z {
	static {
		System.out.println("In C Class Static Initilizer");
	}
}

public class Demo_Q6 {
	
	public static void main(String[] args) {
		System.out.println("Inside Main");
		new X();
		new Y();
		new Z();
		}
	static {
		System.out.println("In Demo Class Static Initilizer");
	}
}