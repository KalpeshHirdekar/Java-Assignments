

1) define your exception class by name "MyArithException"
(MyArithException.java)
define class "Calculator"   (Calculator.java)
In this class define a function,which will accept an int and return double of it.
e.g int caldouble(int)
This function will check an int which is passed to it
It will raise the  exception if 0 is passed or negative passed
in case of 0 caller of this method should get error message
"Zero not allowed" 
in case of negative caller of this method should get error message
"negative not allowed"
In case of positive value it should simply return the double value.
	[ this method shouldn't handle the exception]

Now define class "MyCalcApp" (MyCalcApp.java)
In this class you accept a number from user and pass that no. to
caldouble() method which is mentioned above.

CODE:

package Assignment_8;

public class MyArithException extends Exception {
	
	MyArithException (String mess) {
		super(mess);
	}

}

package Assignment_8;

public class Calculator {
	
	public static int calcDouble (int num) throws MyArithException {
		
		if(num == 0) {
			throw new MyArithException ("Zero not allowed");
		}
		else if (num <0) {
			throw new MyArithException ("Negative number not allowed");
		}
		else {
			return num+num;
		}
	}

}

package Assignment_8;

import java.util.*;

public class MyCalcApp {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter a number");
		
		int num = sc.nextInt();
		
		sc.close();
			
		
		try {
			int douNum = Calculator.calcDouble(num);
			System.out.println("Double is " +douNum);
		}
		
		catch (MyArithException ae) {
			ae.printStackTrace();
		}
	}

}

------------------------------------------------------------------------------------------------------------------------------------------------------------------


2) on the developer side create an exception:
	NumberNotDivisibleBySevenException
	as a checked exception

create necessary jar and documentation.

on client side
	public class MyMath class with 
		public void disp(int num)
this disp() method will check if the number passed is not divisible by 7 , 
it will raise "NumberNotDivisibleBySevenException" or else it will simply display the number passed.
	[ this method shouldn't handle the exception]

	public class Demo
		main function 
		invoke "disp()" of "MyMath" class.

CODE:

package Assignment_8;

public class NumberNotDivisibleBySevenException extends Exception {
	
	public NumberNotDivisibleBySevenException (String mess) {
		super(mess);
	}

}

package Assignment_8;

public class MyMath {
	
	public static void disp(int num) throws NumberNotDivisibleBySevenException {
		
		if (num%7 != 0) {
			throw new NumberNotDivisibleBySevenException ("Number not Divisble by 7");
		}
		else
			System.out.println(num + " is divisible by 7");
	}

}

package Assignment_8;

import java.util.*;

public class Demo {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter a number");
		
		int num = sc.nextInt();
		
		sc.close();
		
		try {
			MyMath.disp(num);
		}
		catch (NumberNotDivisibleBySevenException ne) {
			ne.printStackTrace();
		}

	}

}

------------------------------------------------------------------------------------------------------------------------------------

3) define "MyException" as a checked exception.

define a class "Demo" with 
	public void show1(), public void show2() , public void show3() and main functions.

inside "show3()" accept a number and if it is greater than 10 raise "MyException" else display the number.
	[ this method shouldn't handle the exception]

main() function should call "show1()" , 
show1() function should call "show2()",
show2() function should call "show3()"

show2() should not handle the exception but show1() should handle.

CODE:

package Assignment_8;

public class MyException extends Exception {
	
	public MyException (String s) {
		super(s);
	}
	
}

package Assignment_8;

import java.util.Scanner;

public class Demo2 {
	
	public void Show1(int num) {
	try {	
		Show2(num);
	}
	catch (MyException ae) {
		ae.printStackTrace();
	}
		
	}
	
	public void Show2(int num) throws MyException {
		Show3(num);
	
	}
	
	public void Show3(int num) throws MyException {
		if (num > 10) {
			throw new MyException ("Number is greater than 10");
		}
		else {
			System.out.println(num);
		}
	}

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter a number");
		
		int num = sc.nextInt();
		
		sc.close();
		
		Demo2 ob = new Demo2();
		
		ob.Show1(num);

	}

}

--------------------------------------------------------------------------------------------------------------------------------

4) on the developer side create following checked exception:
	InvalidLengthException
create necessary jar file and documentation.

on client side

public class Authenticator
	with
a parameterized constructor which takes String as a password.
this class also will have "done()" method with "successful authentication" message.
Parameterized constructor should check the length of the password passed 
if it is less than 5 or more that 9 , it should raise "InvalidLengthException" 
	[ constructor shouldn't handle the exception]

create a class "Demo" with main
	inside main function create the object of "Authenticator" class and invoke "done()" method.

CODE:

package Assignment_8;

public class InvalidLengthException extends Exception {
	
	public InvalidLengthException (String s) {
		super(s);
	}

}

package Assignment_8;

public class Authenticator {
	
	private String password;
	
	Authenticator(String pass) throws InvalidLengthException{
		
		if(pass.length() < 5 || pass.length() > 9 ) {
			throw new InvalidLengthException ("Password length should be between 5 and 9 characters	");
		}
		else {
		this.password = pass;
		}
	}
	
	public void done() {
		System.out.println("successful authentication");
	}

}

package Assignment_8;

import java.util.*;

public class Demo3 {

	public static void main(String[] args) throws InvalidLengthException{
		
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter a password");
		
		String Pass = sc.next();
		
		sc.close();
		
		try {
			Authenticator a = new Authenticator(Pass);
			a.done();
		}
		catch (InvalidLengthException ie) {
			System.out.println(ie.getMessage());
		}
	}

}

-----------------------------------------------------------------------------------------------------------------------

5) on the developer side 
create checked exception "ResourceNotAllocatedException"

create a class:

public class MyResource implements AutoCloseable
{
	public MyResource(int capacity) throws ResourceNotAllocatedException
	{
		if(capacity>100)
		{
			throw new ResourceNotAllocatedException("not sufficient space");
		}
	}
    void disp()
    {
    	System.out.println("successful");
    }
	@Override
	public void close()  {
		System.out.println("resource is closed");
		
	}
}

create necessary jar file and documentation

on the client side
public class Demo with main function

	inside main function, create object of "MyResource" and invoke "disp()" method.

CODE:

package Assignment_8;

public class ResourceNotAllocatedException extends Exception {
	
	public ResourceNotAllocatedException (String s) {
		super(s);
	}

}

package Assignment_8;

public class MyResource implements AutoCloseable
{
	public MyResource(int capacity) throws ResourceNotAllocatedException
	{
		if(capacity>100)
		{
			throw new ResourceNotAllocatedException("not sufficient space");
		}
	}
    void disp()
    {
    	System.out.println("successful");
    }
	@Override
	public void close()  {
		System.out.println("resource is closed");
		
	}
}

package Assignment_8;

import java.util.*;

public class Demo4 {

	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter a capacity");
		int num = sc.nextInt();
		
		try {
		MyResource res = new MyResource(num);
		res.disp();
		}
		catch (ResourceNotAllocatedException re) {
			System.out.println(re.getMessage());
		}
		

	}

}

-----------------------------------------------------------------------------------------------------------------------