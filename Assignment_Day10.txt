

1) define a functional interface "First" with an abstract method "void disp1()" ,
 default method "void disp2()" and a static method "void disp3()"

inside main function using lambda expression invoke "disp1()" and "disp2()" methods.
also invoke "disp3()" method inside main.

CODE:

package Assignment_14_Lambda;

interface First {
	void disp1();
	
	default public void disp2() {
		System.out.println("In disp2");
	}
	
	static void disp3() {
		System.out.println("In disp3");
	}
}

public class Demo1 {

	public static void main(String[] args) {
		First ref = () -> {System.out.println("In disp1");};
		ref.disp1();
		ref.disp2();
		
		First.disp3();
		

	}


	}

-----------------------------------------------------------------------------------------------------------

2) define a functional interface "Second" with an abstract method "void disp4()".

define a class Demo with main function.
inside main function create two implementations of "Second" using lambda expression and display their names.

CODE:

package Assignment_14_Lambda;

interface Second {
	void disp4();
}

public class Demo2 {
	
	public static void main(String[] args) {
		Second ref1 = () -> {System.out.println("In disp of first Implementation");};
		ref1.disp4();
		System.out.println(ref1.getClass().getName());
		
		Second ref2 = () -> {System.out.println("In disp of Second Implementation");};
		ref2.disp4();
		System.out.println(ref2.getClass().getName());
		
		}
	}

-----------------------------------------------------------------------------------------------------------

3) define a functional interface "MyInterface" with an abstract method "void fun()"
	
define a class Demo with two functions "static void perform" and main.

from main function pass lambda expression, collect it in "perform" method and invoke "fun()" function.

CODE:

package Assignment_14_Lambda;

interface MyInterface {
	void fun();
}

public class Demo3 {
	
	static void perform(MyInterface ref) {
		ref.fun();
	}
	
	public static void main (String [] args) {
		perform(()->{System.out.println("In Fun Method");});
	}

}

-----------------------------------------------------------------------------------------------------------

4) define a functional interface "Calculator" with an abstract method "int multiply(int a,int b)"
define a class "CalcDemo" with main method.
inside main using lambda create an implementation of "Calculator" , invoke "multiply()" method and 
display its result.

CODE:

package Assignment_14_Lambda;

import java.util.*;

interface Calculator {
	public int multiply(int a, int b);
}
public class CalcDemo {

	public static void main(String[] args) {
		Scanner sc = new Scanner (System.in);
		System.out.println("Enter two numbers:");
		int num1 = sc.nextInt();
		int num2 = sc.nextInt();
		sc.close();
		
		Calculator ref = ( a, b) -> {return a*b;};
		System.out.println(ref.multiply(num1,num2));

	}

}

-----------------------------------------------------------------------------------------------------------

5) define a class "Display" with "void disp" method. inside this method display values from 1 to 10.

create an implementation of "Runnable" using lambda expression which will invoke "disp()" method of
 "Display" class.

create 2 threads and pass above created "Runnable" implementation to these threads.
make sure while one thread is executing other thread will not interfere.

CODE:

package Assignment_14_Lambda;

class Display {
	
	public synchronized void disp() {
		for(int i=1; i<=10 ; i++) {
			System.out.println(i +" "+ Thread.currentThread().getName());
		}
	}
}

public class Demo5 {

	public static void main(String[] args) {
		Display ob = new Display();
		
		Runnable ref = () -> {ob.disp();};
		Thread t1 = new Thread(ref);
		
		t1.start();

	}

}

-----------------------------------------------------------------------------------------------------------